syntax on
set autochdir
filetype plugin indent on
if has('gui_running')
    set guifont=Consolas:h9:cANSI
    " Remove the toolbars and other things from the GUI
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
endif
if has('syntax') && has('eval')
    packadd! matchit
endif
set shiftwidth=4
set softtabstop=4
set expandtab
set nobackup
set nowritebackup
set noswapfile
set number
set relativenumber
set wildmenu
set wildoptions=pum
set whichwrap=b,s,<,>,h,l,[,]
" Using filetype plugin indent instead for workflowish
" Set smartindent
nnoremap Y y$
nnoremap ; :
nnoremap : ;
" Exit quickly
inoremap kj <ESC>
set diffopt+=iwhite

" Better window mapping
nnoremap <C-l> <C-w>v<C-w><C-l>
nnoremap <C-j> <C-w>s<C-w><C-j>
nnoremap <C-q> :q<CR>
nnoremap <C-x> :x<CR>
nnoremap <C-e> :q!<CR>
" breaks navigating with split windows
nnoremap <C-s> :w<CR>
nnoremap <C-a> :%s//g<Left><Left>

" Wrap
:map \p wbi(<Esc>ea)<Esc>
:map \c wbi{<Esc>ea}<Esc>

" Do not show stupid q: window
" map q: :q
" Go to the previous location
nnoremap [q :cprev<CR>

" Go to the next location
nnoremap ]q :cnext<CR>
" Force usage of <C-commands>
" nmap ;q <CR>
" nmap ;x <CR>
" nmap ;w <CR>

fun! ToggleNumber() abort "{{{
    if exists('+relativenumber')
        :exec "setl nu!"
        :exec "setl rnu!"
    else
        setl nu! 
    endif
endf "}}}
nnoremap <C-n> :call ToggleNumber()<CR>

" Easy pasting
set pastetoggle=<F10>
inoremap <C-v> <F10><C-r>+<F10>

cmap <C-w> w !sudo tee > /dev/null %<CR>
cmap <C-y> e $MYVIMRC<CR>
nnoremap <leader>f :NERDTreeFocus<CR>
" remap the p command in visual mode so that it first deletes to the black hole register like
xnoremap p "_dP
"set rtp+=/opt/homebrew/opt/fzf

"autocmd BufNewFile,BufReadPre *.jrnl setlocal viminfo= noswapfile noundofile nobackup nowritebackup noshelltemp history=0 nomodeline secure

"packadd fzf.vim
"packloadall
"silent! helptags ALL

if !has('nvim')
    " Persistent undo
    set undofile
    set undodir=~/.vim/undodir

    " packadd! 'ghifarit53/tokyonight-vim'
    try
"        set termguicolors
"        let g:tokyonight_style = 'night' " available: night, storm
"        let g:tokyonight_enable_italic = 1
"        let g:tokyonight_transparent_background = 1
        " colorscheme tokyonight
        colorscheme Monokai
    catch
        silent! colorscheme desert
    endtry

"    " brazil-config
"    au FileType java call SetWorkspaceFolders()
"    function! SetWorkspaceFolders() abort
"        " Only set g:WorkspaceFolders if it is not already set
"        if exists("g:WorkspaceFolders") | return | endif
"
"        if executable("findup")
"            let l:ws_dir = trim(system("cd '" . expand("%:h") . "' && findup packageInfo"))
"            " Bemol conveniently generates a '$WS_DIR/.bemol/ws_root_folders' file, so let's leverage it
"            let l:folders_file = l:ws_dir . "/.bemol/ws_root_folders"
"            if filereadable(l:folders_file)
"                let l:ws_folders = readfile(l:folders_file)
"                let g:WorkspaceFolders = filter(l:ws_folders, "isdirectory(v:val)")
"            endif
"        endif
"    endfunction
"    au BufReadPost,BufNewFile Config setf brazil-config
"    let g:brazil_config_plugin_path = '/Users/ashmen/workplace/gc/src/NinjaHooks/configuration/vim/amazon/brazil-config'
"    set rtp+=g:brazil_config_plugin_path
"
"
"    """"""""""""""""""""""""""" COC
"
"    " Use tab for trigger completion with characters ahead and navigate
"    " NOTE: There's always complete item selected by default, you may want to enable
"    " no select by `"suggest.noselect": true` in your configuration file
"    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"    " other plugin before putting this into your config
"    inoremap <silent><expr> <TAB>
"                \ coc#pum#visible() ? coc#pum#next(1) :
"                \ CheckBackspace() ? "\<Tab>" :
"                \ coc#refresh()
"    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
"    set updatetime=300
"
"    " Use `[g` and `]g` to navigate diagnostics
"    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
"    nmap <silent> [g <Plug>(coc-diagnostic-prev)
"    nmap <silent> ]g <Plug>(coc-diagnostic-next)
"
"    " GoTo code navigation
"    nmap <silent> gd <Plug>(coc-definition)
"    nmap <silent> gy <Plug>(coc-type-definition)
"    nmap <silent> gi <Plug>(coc-implementation)
"    nmap <silent> gr <Plug>(coc-references)
"
"    " Use K to show documentation in preview window
"    nnoremap <silent> K :call ShowDocumentation()<CR>
"
"    inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
"
"    function! ShowDocumentation()
"        if CocAction('hasProvider', 'hover')
"            call CocActionAsync('doHover')
"        else
"            call feedkeys('K', 'in')
"        endif
"    endfunction
"
endif
